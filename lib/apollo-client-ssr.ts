import { ApolloClient, ApolloLink, InMemoryCache, NormalizedCacheObject } from "@apollo/client";
import { SchemaLink } from "@apollo/client/link/schema";
import { onError } from "@apollo/client/link/error";

import { schema } from "../schema";
import prisma from "./prisma";
import { logger } from "./logger";

export const APOLLO_STATE_PROP_NAME = "__APOLLO_STATE__";

/**
 * Using SchemaLink with the schema generated by nexus is not compatible with an isomorphic link.
 * Otherwise get errors about fs, path, and os not being defined occur when compiling.
 *   > error - ./node_modules/fs-jetpack/lib/streams.js:3:0
 *   > Module not found: Can't resolve 'fs'
 */
export function createApolloClientSSR(): ApolloClient<NormalizedCacheObject> {
  return new ApolloClient({
    ssrMode: true,
    link: ApolloLink.from([
      onError(({ graphQLErrors, networkError }) => {
        if (graphQLErrors)
          graphQLErrors.forEach(({ message, locations, path }) =>
            logger.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)
          );
        if (networkError) logger.error(`[Network error]: ${networkError}. Backend is unreachable. Is it running?`);
      }),
      new SchemaLink({
        schema,
        context: () => {
          return {
            prisma,
          };
        },
      }),
    ]),
    cache: new InMemoryCache(),
  });
}

export function addApolloState(client: ApolloClient<NormalizedCacheObject>, pageProps: any = { props: {} }): any {
  if (pageProps?.props) {
    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();
  }
  return pageProps;
}
